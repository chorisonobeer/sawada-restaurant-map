/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim, skipWaiting } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL, cleanupOutdatedCaches } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, NetworkFirst, CacheFirst } from 'workbox-strategies';

declare const self: ServiceWorkerGlobalScope;

// 即座にクライアントを制御し、古いService Workerをスキップ
clientsClaim();
skipWaiting();

// 古いキャッシュを自動的にクリーンアップ
cleanupOutdatedCaches();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// JavaScript/CSS ファイルに対してNetworkFirst戦略を適用（常に最新を優先）
registerRoute(
  ({ request, url }) => {
    return (
      request.destination === 'script' ||
      request.destination === 'style' ||
      url.pathname.endsWith('.js') ||
      url.pathname.endsWith('.css') ||
      url.pathname.endsWith('.json')
    );
  },
  new NetworkFirst({
    cacheName: 'app-assets',
    networkTimeoutSeconds: 3,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 24 * 60 * 60, // 24時間
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// バージョン情報ファイルは常にネットワークから取得
registerRoute(
  ({ url }) => url.pathname.endsWith('/version.json'),
  new NetworkFirst({
    cacheName: 'version-info',
    networkTimeoutSeconds: 5,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 1,
        maxAgeSeconds: 60, // 1分間のみキャッシュ
      }),
    ],
  })
);

// manifest.json は NetworkFirst で最新を優先
registerRoute(
  ({ url }) => url.pathname.endsWith('/manifest.json'),
  new NetworkFirst({
    cacheName: 'manifest',
    networkTimeoutSeconds: 3,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 1,
        maxAgeSeconds: 60 * 60, // 1時間
      }),
    ],
  })
);

// 画像ファイルに対してStaleWhileRevalidate戦略を適用
registerRoute(
  ({ request, url }) => {
    return (
      request.destination === 'image' ||
      url.pathname.match(/\.(png|jpg|jpeg|svg|gif|webp|ico)$/i)
    );
  },
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 100,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7日間
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Google Sheets CSV データは NetworkFirst で最新を優先
registerRoute(
  ({ url }) => {
    return (
      url.hostname === 'docs.google.com' &&
      url.pathname.includes('/spreadsheets/') &&
      url.search.includes('output=csv')
    );
  },
  new NetworkFirst({
    cacheName: 'csv-data',
    networkTimeoutSeconds: 10,
    plugins: [
      new ExpirationPlugin({
        maxEntries: 10,
        maxAgeSeconds: 5 * 60, // 5分間のみキャッシュ
      }),
    ],
  })
);

// フォントファイルはCacheFirstで高速化
registerRoute(
  ({ request, url }) => {
    return (
      request.destination === 'font' ||
      url.pathname.match(/\.(woff|woff2|ttf|otf)$/i)
    );
  },
  new CacheFirst({
    cacheName: 'fonts',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30日間
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('🔄 SKIP_WAITING message received, updating Service Worker');
    self.skipWaiting();
  }
});

// Service Worker のインストール時
self.addEventListener('install', (event) => {
  console.log('🔧 Service Worker installing...');
  // 即座に有効化
  self.skipWaiting();
});

// Service Worker の有効化時
self.addEventListener('activate', (event) => {
  console.log('✅ Service Worker activated');
  
  // 全てのクライアントを即座に制御
  event.waitUntil(
    Promise.all([
      self.clients.claim(),
      // 古いキャッシュをクリーンアップ
      caches.keys().then(cacheNames => {
        return Promise.all(
          cacheNames.map(cacheName => {
            // 古いバージョンのキャッシュを削除
            if (cacheName.includes('workbox-precache') && 
                !cacheName.includes('workbox-precache-v2')) {
              console.log('🗑️ Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
            return Promise.resolve(); // 条件に合わない場合も戻り値を返す
          })
        );
      })
    ])
  );
});

// ネットワークエラー時のフォールバック
self.addEventListener('fetch', (event) => {
  // HTMLリクエストでネットワークエラーが発生した場合、キャッシュされたindex.htmlを返す
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match('/index.html');
      })
    );
  }
});

console.log('🚀 Service Worker loaded with optimized caching strategies');
