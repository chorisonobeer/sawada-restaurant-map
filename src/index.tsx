import React from 'react';
import ReactDOM from 'react-dom';
import { HashRouter } from "react-router-dom";
import Container from './Container';
import './index.scss'
import './global-pull-refresh-disable.css'
import * as serviceWorkerRegistration from './serviceWorkerRegistration';
import VersionManager from './utils/versionManager';

// „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñ
const versionManager = VersionManager.getInstance();

// „Ç¢„Éó„É™ÁµÇ‰∫ÜÊôÇ„Å´„Ç§„Éô„É≥„Éà„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂâäÈô§
window.addEventListener('beforeunload', () => {
  sessionStorage.removeItem('eventListCache');
});

// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Âº∑Âà∂Êõ¥Êñ∞Áî®„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
const handleForceUpdate = () => {
  console.log('üîÑ Force update triggered by Version Manager');
  
  // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶„Åã„Çâ„É™„É≠„Éº„ÉâÔºà„É¶„Éº„Ç∂„Éº„Å´Êõ¥Êñ∞„ÇíÈÄöÁü•„Åô„ÇãÊôÇÈñì„ÇíÁ¢∫‰øùÔºâ
  setTimeout(() => {
    window.location.reload();
  }, 1000);
};

ReactDOM.render(
  <React.StrictMode>
    <HashRouter>
      <Container />
    </HashRouter>
  </React.StrictMode>,
  document.getElementById('root')
);

// Service WorkerÁôªÈå≤ÊôÇ„Å´Êõ¥Êñ∞„Åå„ÅÇ„Çå„Å∞Âç≥Â∫ß„Å´ÈÅ©Áî®
serviceWorkerRegistration.register({
  onUpdate: (registration) => {
    console.log('üÜï Service Worker update detected');
    
    // Êñ∞„Åó„ÅÑService Worker„ÅåÂà©Áî®ÂèØËÉΩ„Å´„Å™„Å£„Åü„ÇâÂç≥Â∫ß„Å´Êõ¥Êñ∞
    if (registration && registration.waiting) {
      console.log('üîÑ Applying Service Worker update immediately');
      registration.waiting.postMessage({ type: 'SKIP_WAITING' });
      
      // Â∞ë„ÅóÂæÖ„Å£„Å¶„Åã„Çâ„É™„É≠„Éº„Éâ
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }
  },
  onSuccess: (registration) => {
    console.log('‚úÖ Service Worker registered successfully');
  }
});

// „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†„ÇíÂàùÊúüÂåñÔºàDOMË™≠„ÅøËæº„ÅøÂÆå‰∫ÜÂæåÔºâ
window.addEventListener('load', async () => {
  try {
    console.log('üöÄ Initializing Version Manager...');
    await versionManager.initialize(handleForceUpdate);
    
    // ÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥ÊÉÖÂ†±„Çí„Ç≥„É≥„ÇΩ„Éº„É´„Å´Ë°®Á§∫
    const currentVersion = versionManager.getCurrentVersion();
    if (currentVersion) {
      console.log('üì¶ App Version:', currentVersion.version);
      console.log('üìÖ Build Date:', currentVersion.buildDate);
    }
    
    // „Éá„Éê„ÉÉ„Ç∞Áî®: ÊâãÂãïÊõ¥Êñ∞„ÉÅ„Çß„ÉÉ„ÇØÊ©üËÉΩ„Çí„Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
    if (process.env.NODE_ENV === 'development') {
      (window as any).checkForUpdates = () => versionManager.manualUpdateCheck();
      console.log('üîß Debug: Use checkForUpdates() to manually check for updates');
    }
    
  } catch (error) {
    console.error('‚ùå Error initializing Version Manager:', error);
  }
});

// „Éö„Éº„Ç∏„ÅÆÂèØË¶ñÊÄß„ÅåÂ§âÊõ¥„Åï„Çå„ÅüÊôÇÔºà„Çø„Éñ„ÅÆÂàá„ÇäÊõø„Åà„Å™„Å©Ôºâ„Å´„Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ
document.addEventListener('visibilitychange', () => {
  if (!document.hidden) {
    console.log('üëÅÔ∏è Page became visible, checking for updates...');
    versionManager.checkForUpdates().catch(error => {
      console.warn('‚ö†Ô∏è Update check failed:', error);
    });
  }
});

// „Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÅåÂæ©Êóß„Åó„ÅüÊôÇ„Å´„Éê„Éº„Ç∏„Éß„É≥„ÉÅ„Çß„ÉÉ„ÇØ
window.addEventListener('online', () => {
  console.log('üåê Network connection restored, checking for updates...');
  versionManager.checkForUpdates().catch(error => {
    console.warn('‚ö†Ô∏è Update check failed:', error);
  });
});
